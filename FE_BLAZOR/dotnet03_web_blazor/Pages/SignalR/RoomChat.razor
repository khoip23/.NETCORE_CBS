@page "/demo-chat-room"
@inject NavigationManager _nav
@implements IDisposable
@inject IJSRuntime JS

<style>
    .chat-sidebar {
        height: 100vh;
        border-right: 1px solid #dee2e6;
    }

    .chat-room {
        height: 100vh;
    }

    .chat-message {
        padding: 10px;
    }

    .chat-time {
        font-size: 0.8rem;
        color: gray;
    }

    .chat-room-list .btn {
        width: 100%;
        text-align: left;
    }

    .chat-room-item {
        display: flex;
        justify-content: space-between;
    }
</style>

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-3 chat-sidebar p-3">
            <h4>Chat room</h4>
            <div class="d-flex justify-content-between align-items-center mb-2">
                <span class="fw-bold">Chat Rooms</span>
                <button class="btn btn-primary btn-sm" @onclick="AddRoom">+ Add Room</button>
            </div>
            <div class="chat-room-list">
                <!-- Room list -->
                <div class="list-group">
                    <!-- Repeat this block for each room -->
                    @foreach (RoomModel room in lstRoom)
                    {
                        <button class="btn btn-light chat-room-item mb-1">
                            @room.roomName <span class="badge bg-primary rounded-pill">
                                @room.id
                            </span>
                        </button>
                    }


                </div>
            </div>
        </div>

        <!-- Chat Area -->
        <div class="col-9 chat-room p-3">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="mb-0">Room 1</h5>
                <button class="btn btn-danger btn-sm">Leave Room</button>
            </div>
            <div class="chat-box">
                <div class="chat-message">
                    <strong>User1</strong><br>
                    Hello everyone!<br>
                    <span class="chat-time">10:30 AM</span>
                </div>
                <div class="chat-message text-end">
                    <strong>You</strong><br>
                    Hi! How are you?<br>
                    <span class="chat-time">10:31 AM</span>
                </div>
            </div>
        </div>
    </div>
</div>


@code {

    List<RoomModel> lstRoom = new List<RoomModel>() {
new RoomModel(1)
};
    HubConnection hub;

    public void Dispose()
    {
        hub.DisposeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        //Cài đặt kết nối từ client đến hub
        hub = new HubConnectionBuilder().WithUrl($"{_nav.ToAbsoluteUri("/roomhub")}").Build();
        await hub.StartAsync();

        //Cấu hình lắng nghe server hub từ hubroom
        hub.On<List<RoomModel>>("SendToAllRoom", async (lstRoomFromHub) =>
        {
            lstRoom = lstRoomFromHub;

            @* Console.WriteLine($@"{JsonSerializer.Serialize(lstRoomFromHub)}"); *@

            //Yêu cầu blazor load lại component sau khi thay đổi dữ liệu
            await InvokeAsync(StateHasChanged);
        });
    }


      protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
    
            await JS.InvokeVoidAsync("renderHTML");
            int res = await JS.InvokeAsync<int>("tinhTong",1,2);
            await JS.InvokeVoidAsync("main");
            Console.WriteLine(@$"res {res}"); 
        }
        else
        {
            // Logic for subsequent renders
            Console.WriteLine("Component re-rendered.");
        }
    }

    public async Task AddRoom()
    {
        //Gọi hàm trên serverhub
        await hub.InvokeAsync("AddRoomHub");
    }

}
